<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>math/numbers on Zettelkasten</title><link>https://salehahr.github.io/zettelkasten/tags/math/numbers/</link><description>Recent content in math/numbers on Zettelkasten</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://salehahr.github.io/zettelkasten/tags/math/numbers/index.xml" rel="self" type="application/rss+xml"/><item><title>Bin-hex-dec table</title><link>https://salehahr.github.io/zettelkasten/embedded/bin-hex-dec-table/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/bin-hex-dec-table/</guid><description>See also: bits-and-bytes Bin Hex Dec Notes 0000 0x0 0 0001 0x1 1 0010 0x2 2 0011 0x3 3 0100 0x4 4 0101 0x5 5 0110 0x6 6 0111 0x7 7 1000 0x8 8 1001 0x9 9 1010 0xA 10 even 1011 0xB 11 1100 0xC 12 even 1101 0xD 13 1110 0xE 14 even 1111 0xF 15 Note</description></item><item><title>bit-logic</title><link>https://salehahr.github.io/zettelkasten/embedded/bit-logic/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/bit-logic/</guid><description>Source: samek-embedded Logic Description Notes (num &amp;amp; 1) != 0 Odd number Tests the least significant bit (num &amp;amp; 1) == 0 Even number a | b Bit-wise OR a &amp;amp; b Bit-wise AND a ^ b Exclusive OR ~b NOT Bit shift operations Unsigned Uses logical bit shifting.</description></item><item><title>bits-and-bytes</title><link>https://salehahr.github.io/zettelkasten/embedded/bits-and-bytes/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/bits-and-bytes/</guid><description>See also: bin-hex-dec-table Example (bin) Bit Byte Hex Example (hex) Note 0 1 0x0 01 2 0x1 0101 4 0x5 Nibble (half byte) 1111 0xF 0101 0101 8 1 0x55 Half word 1111 1111 0xFF 0011 0101 0011 0101 16 2 1 0x3535 Word 32 4 2 0xDEAD&amp;rsquo;BEEF Note</description></item><item><title>integer-overflow</title><link>https://salehahr.github.io/zettelkasten/embedded/integer-overflow/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/integer-overflow/</guid><description>Source: samek-embedded 8-bit representation Hex Dec Bin Hex Dec Bin 0xFF -1 1111 1111 0x01 1 0000 0001 0xFE -2 1111 1110 0x02 2 0000 0010 0xFD -3 1111 1101 0x03 3 0000 0011 &amp;hellip; 0x81 -127 1000 0001 0x7F 127 0111 1111 0x80 -128 1000 0000 Getting the negative hex representation:</description></item></channel></rss>