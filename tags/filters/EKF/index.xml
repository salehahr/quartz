<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>filters/EKF on Zettelkasten</title><link>https://salehahr.github.io/zettelkasten/tags/filters/EKF/</link><description>Recent content in filters/EKF on Zettelkasten</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://salehahr.github.io/zettelkasten/tags/filters/EKF/index.xml" rel="self" type="application/rss+xml"/><item><title>Schneider 2013 How to not make the EKF fail</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/schneider-2013-how-to-not-make-the-ekf-fail/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/schneider-2013-how-to-not-make-the-ekf-fail/</guid><description>Authors: Schneider, Georgakis URL: http://www.researchgate.net/publication/263942618_How_To_NOT_Make_the_Extended_Kalman_Filter_Fail/citations DOI 10.1021/ie300415d Measurement noise R, V (landmark) Kalman filter initial estimates Process noise Q and W (odometry) Kalman filter performance metric</description></item><item><title>50.6 ESKF prediction equations</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/50.6-eskf-prediction-equations/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/50.6-eskf-prediction-equations/</guid><description>Parents: [IMU index](imu index.md), 50.3 error-state-kalman-filter Source: Solà 2017 Quaternion kinematics for ESKF Error state system equation becomes: where (s. IMU nominal-state and error-state kinematics for an overview of the nonlinear kinematics equations)
State propagation (without considering noise) — produces a state estimate (a priori) Note: this always returns zero as the mean of the error initialises to zero!
Covariance propagation (considers noise); a priori estimate with the Jacobians (transition matrix approximated using first order Euler, more precise methods are available)</description></item><item><title>50.5 Error-State Kalman Filter</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/50.5-error-state-kalman-filter/</link><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/50.5-error-state-kalman-filter/</guid><description>Source: Markley An EKF propagates the expectation and covariance of the state The MEKF propagates the expectation and the covariance of the error state Source: Whampsey MEKF Previously: orientation is represented by one state Now: orientation is split up into  a large signal q_nom (nominal orientation) and a small signal (perturbation angle alpha) &amp;ndash; parametrises an error quaternion  This reformulates the error in terms of the group operation and so maintains the rotation invariance (rotation preserves the origin, length, angle between two vectors, orientation, etc.</description></item><item><title>Cyril Stachniss EKF-SLAM</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/cyril-stachniss-ekf-slam/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/cyril-stachniss-ekf-slam/</guid><description>Links:
Course material: http://ais.informatik.uni-freiburg.de/teaching/ws13/mapping/ Lectures: http://www.youtube.com/playlist?list=PLgnQpQtFTOGQrZ4O5QzbIHgl3b1JHimN_&amp;amp;feature=g-list</description></item><item><title>Solà 2014 SLAM with EKF</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/sol%C3%A0-2014-slam-with-ekf/</link><pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/sol%C3%A0-2014-slam-with-ekf/</guid><description> Notes on EKF-SLAM that uses landmarks MATLAB code Notes on partial landmark initialisation (convariance matrix) Notes on the linearity of the observation function in scale</description></item><item><title>Discussion 2021-05-10</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/discussion-2021-05-10/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/discussion-2021-05-10/</guid><description>Agenda
Change/Reduction of scope of SA (from fusing IMU with camera) to using sensor fusion to determine transformation parameters between IMU and camera Camera and IMU setup involves kinematic modelling (not fixed transformation as previously assumed!) Offline implementation in Python/MATLAB (scripting language) HiWi tasks can include DefSLAM bindings / interface C++ bindings of skrogh EKF implementation? HiWi prioritises Versuchsstand for now Tasks
Find an EKF implementation that works well and can be used with DefSLAM + IMU data implement kinematic model equations in the prediction-step, s.</description></item><item><title>General EKF implementation (non-SLAM)</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/general-ekf-implementation-non-slam/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/general-ekf-implementation-non-slam/</guid><description>Parent: Extended Kalman Filter Source: SLAM for Dummies General (non-SLAM) implementation of EKF:
only state estimation robot is given a perfect map no map update necessary SLAM implementations of EKF requires map update and therefore the matrices are changed.
Source: Scaradozzi 2018 SLAM application in surgery EKF vs KF circumvents linearity assumption uses nonlinear functions to describe the next state probability measurement probability approximates the state distribution with a Gaussian Random Variable</description></item><item><title>EKF System State</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/ekf-system-state/</link><pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/ekf-system-state/</guid><description>Source: SLAM for Dummies Backlinks: EKF matrices , step-2:-re-observation Contains robot POSE and landmark position POSE: (x y theta)_r LM: (x, y)_l1 &amp;hellip; (x,y)_ln; n = num. of landmarks Size: 3+2n rows</description></item><item><title>Kalman gain for EKF</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/kalman-gain-for-ekf/</link><pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/kalman-gain-for-ekf/</guid><description>Source: SLAM for Dummies Backlinks: EKF matrices How much we will trust the observed landmarks
compromise between odometry and landmark correction uses uncertainty of observed landmarks measure of quality of the range measurement device odometry performance Gains for range and brearing (3+2n x 2)</description></item><item><title>50.2.1 Process noise Q and W (odometry)</title><link>https://salehahr.github.io/zettelkasten/SLAM/50.2.1-process-noise-q-and-w-odometry/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/SLAM/50.2.1-process-noise-q-and-w-odometry/</guid><description>See also: Factors affecting Kalman filter performance Source: Tereshkov 2015 Process noise covariance matrix has no clear physical meaning, cannot be deduced from sensor characteristics Leads to non-intuitive, iterative procedures to tune KFs Which means that KF optimality is rarely achieved in practice Alternative to KF tuning: the use of geometric observers
estimates are expresssed only in terms of quantities with clear geometrical meaning Source: Schneider 2013 If perfect model: $Q$ only describes the covariance of the random process noise Not perfect model, has: parametric errors (-&amp;gt; parameter identification) structural erors (error in model structure) workaround: e.</description></item><item><title>50.2.2 Measurement noise R, V (landmark)</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/50.2.2-measurement-noise-r-v-landmark/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/50.2.2-measurement-noise-r-v-landmark/</guid><description>Parent: Multivariate Kalman filter algorithm Source: rlabbe Kalman/Bayesian filters in Python R models the noise in the sensors as a covariance matrix dim(R) = m x m (m: number of sensors) Possible complications in multisensor systems, the correlation between the sensors might not be clear sensor noise might not be pure Gaussian Source: http://www.linkedin.com/pulse/tuning-extended-kalman-filter-process-noise-training-alex-thompson Ways to obtain R
Using the variances given in the sensor specifications Comopare the measurements against a strong ground truth and derive the variance variable by variable Record the steady state measurements over a long period of time and measure the variance (look at the histogram) Source: [Schneider 2013 How to not make the EKF fail](schneider 2013 how to-not-make-the-ekf-fail.</description></item><item><title>Covariance matrix P</title><link>https://salehahr.github.io/zettelkasten/SLAM/covariance-matrix-p/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/SLAM/covariance-matrix-p/</guid><description>Source: SLAM for Dummies s. also EKF matrices Covariance matrix P
Covariance: measure of correlation of two variables Correlation: measure of degree of linear dependence A covariance of the robote POSEupdated in Step 1: Odometry update 3x3 B .. C covariance on the first .. nth landmarkStep 3: New landmarks 2x2 D covariance between POSE and first LMupdated in Step 1: Odometry update 2x3 E, etc E = D^T, etcupdated in Step 1: Odometry update 3x2 F=G^T Step 3: New landmarks Initially $P = A$ (robot has not seen any LMs)</description></item><item><title>Measurement model</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/measurement-model/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/measurement-model/</guid><description>Source: SLAM for Dummies Backlinks: EKF matrices/vectors Estimate of the range and bearing (from landmark) in Step 2: Re-observation x, y, theta - current position estimate lambdax, y - landmark position
Jacobian H w.r.t. x, y, theta (here for regular EKF, not for extended) In SLAM we need additional values for the landmarks here for landmark number two in extended EKF Upper row is for information, not part of matrix First three columns are regular H Landmarks don&amp;rsquo;t have any rotation</description></item><item><title>Prediction model</title><link>https://salehahr.github.io/zettelkasten/SLAM/prediction-model/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/SLAM/prediction-model/</guid><description>Source: SLAM for Dummies Used in the prediction step .
How to compute an expected position of the robot given the old position and the control input (so basically based on odometry .
Control terms are $\Delta x, \Delta y, \Delta \theta$)
$$ f = \left[ \begin{array}{c} x + \Delta t \cos \theta + q \Delta t \cos \theta \
y + \Delta t \sin \theta + q \Delta t \sin \theta \</description></item><item><title>SLAM-specific jacobians</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/slam-specific-jacobians/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/slam-specific-jacobians/</guid><description>Source: SLAM for Dummies Backlinks: EKF matrices/vectors Jxr
Jacobian of the prediction of landmarks, which does not include prediction of theta, w.r.t. robot POSE same as J_prediction model, except without rotation term Jz Jacobian of prediction of landmarks, but w.r.t. [range, bearing]</description></item><item><title>Step 1 Odometry update (Prediction step)</title><link>https://salehahr.github.io/zettelkasten/SLAM/step-1-odometry-update-prediction-step/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/SLAM/step-1-odometry-update-prediction-step/</guid><description>Source: SLAM for Dummies First step in the three-step EKF Update current state using odometry data Based on the controls given to the robot Calculate estimate of new POSE Update equation: prediction model ($x = x + \Delta x \cdot q$)
Or in a simple model, neglect the error term $q$
State vector gets updated via the prediction model
Jacobian of the prediction model also needs to be updated every iteration (with the controls deltax, &amp;hellip;)</description></item><item><title>Step 2 Re-observation</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/step-2-re-observation/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/step-2-re-observation/</guid><description>&amp;laquo;&amp;laquo;&amp;laquo;&amp;lt; HEAD Source: SLAM for Dummies Backlinks: Basic EKF for SLAM Source: SLAM for Dummies content
Second step in the three-step EKF — overview
In this step we update the robot position that we got in [step 1]](studienarbeit/step-1-odometry-update-prediction-step.md) Compensate for errors due to odometry pos_est (odometry-based) - pos_actual (LM-based) = Innovation, (based on the LM that the robot can see)</description></item><item><title>Step 3 New landmarks</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/step-3-new-landmarks/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/step-3-new-landmarks/</guid><description>Source: SLAM for Dummies Backlinks: Basic EKF for SLAM Overview
Landmarks that are new are not dealt with until step 3. Delaying the incorporation of new landmarks until the will decrease the computation cost needed for this step the covariance matrix, P, and the system state, X, are smaller by then. Update state vector x and covariance matrix P with new landmarks Add new landmark to state vector X Add new row and column to covariance matrix Covariance for new landmark Robot-landmark covariance</description></item><item><title>Basic EKF for SLAM</title><link>https://salehahr.github.io/zettelkasten/SLAM/basic-ekf-for-slam/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/SLAM/basic-ekf-for-slam/</guid><description>Source: SLAM for Dummies A basic EKF implementation of SLAM consists of multiple parts:
Landmark extraction Data association After odometry change (due to robot moving), state estimation from odometry Update of the estimated state using re-observed landmark data Update landmark database with new landmarks Note: at any point in the three steps on the left, the EKF will have an estimate of the robots current position</description></item><item><title>Basic EKF for SLAM</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/basic-ekf-for-slam/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/basic-ekf-for-slam/</guid><description>Parent: Extended Kalman Filter , slam_index Backlinks: RANSAC See also: What is SLAM? Source: SLAM for Dummies A basic EKF implementation of SLAM consists of multiple parts:
Landmark extraction Data association After odometry change (due to robot moving), state estimation from odometry Update of the estimated state using re-observed landmark data Update landmark database with new landmarks Note: at any point in the three steps on the left, the EKF will have an estimate of the robots current position</description></item><item><title>EKF matrices/vectors</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/ekf-matrices-vectors/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/ekf-matrices-vectors/</guid><description>Source: SLAM for Dummies System state X Estimate of POSE Jacobian of prediction model Landmark range and bearing Jacobian of measurement model Covariance matrix P Kalman gain K SLAM-specific jacobians</description></item><item><title>Extended Kalman Filter</title><link>https://salehahr.github.io/zettelkasten/SLAM/extended-kalman-filter/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/SLAM/extended-kalman-filter/</guid><description>Parent: SLAM Index Backlinks: RANSAC , nearest neighbour , Filtering in localisation Source: SLAM for Dummies keeps track of an estimate of the position uncertainty keeps track of the uncertainty in the features/landmarks seen General EKF implementation (non-SLAM) Basic EKF for SLAM Diagram: Triangle Robot Stars Landmarks Dashed triangle Robot&amp;rsquo;s position based on odometry alone (where it thinks it is) Dotted triangle Robot&amp;rsquo;s position estimate based on EKF Solid line triangle Robot&amp;rsquo;s actual position in real life!</description></item><item><title>Extended Kalman Filter</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/extended-kalman-filter/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/extended-kalman-filter/</guid><description>Parent: SLAM Index Backlinks: RANSAC , [nearest neighbour](nearest neighbour.md), filter-localisation-methods Source: SLAM for Dummies keeps track of an estimate of the position uncertainty keeps track of the uncertainty in the features/landmarks seen General EKF implementation (non-SLAM) Basic EKF for SLAM Diagram: Triangle Robot Stars Landmarks Dashed triangle Robot&amp;rsquo;s position based on odometry alone (where it thinks it is) Dotted triangle Robot&amp;rsquo;s position estimate based on EKF Solid line triangle Robot&amp;rsquo;s actual position in real life!</description></item></channel></rss>