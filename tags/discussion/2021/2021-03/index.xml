<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>discussion/2021/2021-03 on</title><link>https://salehahr.github.io/zettelkasten/tags/discussion/2021/2021-03/</link><description>Recent content in discussion/2021/2021-03 on</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://salehahr.github.io/zettelkasten/tags/discussion/2021/2021-03/index.xml" rel="self" type="application/rss+xml"/><item><title>Besprechung 2021-03-15</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/besprechung-2021-03-15/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/besprechung-2021-03-15/</guid><description>Status
Last week: generated noisy IMU data (pose) from stereo trajectory, &amp;lsquo;offline&amp;rsquo; Kalman This week: Kalman + &amp;lsquo;live&amp;rsquo; DefSLAM Still to do: design KF (EKF, or other methods&amp;hellip;) &amp;lsquo;Offline&amp;rsquo; Kalman
To learn how to use openCV&amp;rsquo;s Kalman filter without having to rebuild DefSLAM every time Aim was to figure out the update/correction workflow and implement it in live DefSLAM run
Uses pre-extracted trajectories (mono and stereo)</description></item><item><title>vi.cc using kalman for xyz states (what goes on with the map?)</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/vi.cc-using-kalman-for-xyz-states/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/vi.cc-using-kalman-for-xyz-states/</guid><description>Offline Kalman Kalman and live DefSLAM</description></item><item><title>Besprechung 2021-03-08</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/besprechung-2021-03-08/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/besprechung-2021-03-08/</guid><description>Agenda
DefSLAM + OS3 Up till DefTracking::MonocularInitialization() on hold, working on Kalman stuff for the time being DefSLAM + Kalman new plot (monocular trajectory without any pose updating) to do: use noisy stereo data, plug into update step while discarding images functions in System.cc: read data, update pose DefSLAM + sockets Meeting notes:
next step: implement the Kalman filter. When that is done, discuss next steps e.</description></item><item><title>System::forceTrajectory</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/system-forcetrajectory/</link><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/system-forcetrajectory/</guid><description>Parent: DefSLAM branch overview Reference: DefSLAMGT (stereo as ground truth) For testing: DefSLAMVI
Description Force update of DefSLAMVI&amp;rsquo;s current frame pose to that of DefSLAMGT&amp;rsquo;s for the frames 230 to 239
Without System::Reset Frame pose is &amp;lsquo;updated&amp;rsquo; during the interval, but after the interval, the optimisation (which uses frame pose as an estimate and also uses map node positions) makes the system resume it&amp;rsquo;s trajectory before the update
(below: with pure monocular trajectory, without any forced updates) With System::Reset The system is reset after every forced pose update (i.</description></item><item><title>DefSLAM branch overview</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/defslam-branch-overview/</link><pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/defslam-branch-overview/</guid><description>Parent:Â SA TODO Repo http://github.com/feudalism/DefSLAM
Dormant
master sa Deprecated
windows - deprecated, changes made for building on Windows imu - deprecated, has Imu tracking functions but dependencies not resolved obs_tuple - initial attempt to incorporate Atlas, attempt to use OS3&amp;rsquo;s structure for MapPoint observations : &amp;lt;KeyFrame, tuple&amp;lt;int, int&amp;raquo; as opposed to &amp;lt;Keyframe, int&amp;gt; in DefSLAM+OS2 Temporary/Experimental
s. to do list
debugging the segfault that seemingly appears in Surface::getNormalSurfacePoint seems to happen after System reset</description></item></channel></rss>