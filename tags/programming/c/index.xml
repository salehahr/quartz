<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming/c on Zettelkasten</title><link>https://salehahr.github.io/zettelkasten/tags/programming/c/</link><description>Recent content in programming/c on Zettelkasten</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://salehahr.github.io/zettelkasten/tags/programming/c/index.xml" rel="self" type="application/rss+xml"/><item><title>Arrays in C</title><link>https://salehahr.github.io/zettelkasten/embedded/arrays-in-c/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/arrays-in-c/</guid><description>Source: samek-embedded Group of variables of the same type. The variables occupy consecutive memory locations. An array is treated as a pointer (to the beginning of the array). Likewise, every pointer can also be viewed as an array. 1 2 3 4 int counter[2] = {0, 0}; counter[0] = 1; counter[1] = 2; Indexing the array is equivalent to adding the index to the array pointer and getting the value at that address.</description></item><item><title>heap</title><link>https://salehahr.github.io/zettelkasten/embedded/heap/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/heap/</guid><description>Source: samek-embedded Region of RAM for dynamic memory allocation using malloc() and free(). Not typically used in real time embedded programming.</description></item><item><title>stack</title><link>https://salehahr.github.io/zettelkasten/embedded/stack/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/stack/</guid><description>Source: samek-embedded Stack Area of RAM that can grow or shrink from one end. Analogous to a stack of dishes: new data/dishes can only be added to the top, and data/dishes can only be taken away from the top. In ARM , the stack grows towards the lower addresses. Pointed to by the stack pointer . Initial values of the stack are random, therefore it is important, in function calls, to initialise variables correctly.</description></item><item><title>preprocessor-macros</title><link>https://salehahr.github.io/zettelkasten/embedded/preprocessor-macros/</link><pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/preprocessor-macros/</guid><description>Source: samek-embedded Manual definition of macros 1 2 3 4 5 6 7 8 9 10 11 12 #define RCGCGPIO *((unsigned int *)0x400FE608U) #define GPIOF_BASE 0x40025000u #define GPIOF_DIR (*((unsigned int *)( GPIOF_BASE + 0x400U))) #define GPIOF_DEN (*((unsigned int *)( GPIOF_BASE + 0x51CU))) int main() { RCGCGPIO |= 0x20U; GPIODIR |= 0xEU; GPIOF_DEN |= 0xEU; ... } Notes:
Macros can also be partial statements Calculations within the macros don&amp;rsquo;t lead to runtime overheads Header files 1 2 3 4 5 6 #include &amp;lt;stdint.</description></item><item><title>volatile</title><link>https://salehahr.github.io/zettelkasten/embedded/volatile/</link><pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/volatile/</guid><description>Source: samek-embedded The volatile keyword indicates that the variable might change spontaneously. For example: variables which depend on user input and are not affected by program instructions It can be useful to define a variable to be volatile when high levels of optimisations are performed by the compiler, e.g. for counter variables which are not used outside of loops.</description></item><item><title>bit-logic</title><link>https://salehahr.github.io/zettelkasten/embedded/bit-logic/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/bit-logic/</guid><description>Source: samek-embedded Logic Description Notes (num &amp;amp; 1) != 0 Odd number Tests the least significant bit (num &amp;amp; 1) == 0 Even number a | b Bit-wise OR a &amp;amp; b Bit-wise AND a ^ b Exclusive OR ~b NOT Bit shift operations Unsigned Uses logical bit shifting.</description></item><item><title>pointers</title><link>https://salehahr.github.io/zettelkasten/embedded/pointers/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/embedded/pointers/</guid><description>Source: samek-embedded Pointers Variables which hold memory addresses. Can also be viewed as arrays . Declaration 1 int *p_int; Assignment Address/pointer assignment
1 2 p_int = &amp;amp;another_variable; p_int = (unsigned int *)0x20000000U; Dereferencing Value assignment
1 *p_int = 0xDEADBEEFU; Shortcut Skips declaration, goes directly to value assignment.
1 *((unsigned int *)0x20000000U) = 0xDEADBEEFU;</description></item></channel></rss>