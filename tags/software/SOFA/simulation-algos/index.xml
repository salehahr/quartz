<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software/SOFA/simulation-algos on</title><link>https://salehahr.github.io/zettelkasten/tags/software/SOFA/simulation-algos/</link><description>Recent content in software/SOFA/simulation-algos on</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><atom:link href="https://salehahr.github.io/zettelkasten/tags/software/SOFA/simulation-algos/index.xml" rel="self" type="application/rss+xml"/><item><title>Collision detection and response</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/collision-detection-and-response/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/collision-detection-and-response/</guid><description>Source: SOFA extended documentation Parent: Simulation algorithms in SOFA split into several phases each phase is scheduled by a CollisionPipeline component an object which can potentially collide is associated with a collision geometry returns pairs of colliding bounding volumes (broad phase component) returns pairs of geometric primitives + contact points (narrow phase component) the returned pairs are passed to the contact manager the contact manager creates contact interactions &amp;hellip; (skimmed)</description></item><item><title>Constraint solvers</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/constraint-solvers/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/constraint-solvers/</guid><description>Source: SOFA extended documentation Parent: Simulation algorithms in SOFA Backlinks: Scene graph in SOFA Lagrange multipliers to handle complex constraints (which aren&amp;rsquo;t handle-able using projection matrices ) May be combined with explicit or implicit integration phi: bilateral interaction laws (attachments, sliding joints, &amp;hellip;) psi: unilateral interaction laws (contact, friction, &amp;hellip;)
The Lagrange multipliers add force terms to the equation A*dv = b The H matrices are stored in the MechanicalState of each node.</description></item><item><title>Linear solvers</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/linear-solvers/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/linear-solvers/</guid><description>Source: SOFA extended documentation Parent: Simulation algorithms in SOFA Conjugate gradient J: first-order mapping of a node to its parent path(i): list of mappings from the independent DOFs to the node the force applies to
Computation using a visitor: Top down visitor: propagates the given displacement, clears force vector Bottom up visitor: accumulates forces, maps them up to the independent DOFs Direct solvers
can be used as preconditioners of the conjugate gradient algorithm can be used to solve the equation system A*dv=b implementations are based external libraries</description></item><item><title>ODE solvers</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/ode-solvers/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/ode-solvers/</guid><description>Source: SOFA extended documentation Parent: Simulation algorithms in SOFA Backlinks:Â Linear solvers , constraint-solvers implement animation algorithms at each time step integrate and compute positions and velocities one time step ahead uses state vectors (e.g. for position or force), denoted by symbolic identificators called VecId s this allows the solver to be implemented completely independently of the physical model Each statement in the example above is implemented using a visitor</description></item><item><title>Simulation algorithms in SOFA</title><link>https://salehahr.github.io/zettelkasten/studienarbeit/simulation-algorithms-in-sofa/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/zettelkasten/studienarbeit/simulation-algorithms-in-sofa/</guid><description>Source: SOFA extended documentation ODE integration ( ODE solvers ) Linear equation solution ( linear solvers ) Complex constraints ( constraint solvers ) Collision detection and response GPU support</description></item></channel></rss>