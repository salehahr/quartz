<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>software/SOFA on</title><link>https://salehahr.github.io/tags/software/SOFA/</link><description>Recent content in software/SOFA on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://salehahr.github.io/tags/software/SOFA/index.xml" rel="self" type="application/rss+xml"/><item><title>OptiTrack in SOFA</title><link>https://salehahr.github.io/studienarbeit/optitrack-in-sofa/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/optitrack-in-sofa/</guid><description> Using OptiTrackNatNet C++ implementation? http://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/ XML scenes? OptiTrack + Python otnn_client = root.addObject(&amp;lsquo;OptiTrackNatNetClient&amp;rsquo;, name=&amp;lsquo;otnnClient&amp;rsquo;) &amp;lt;Sofa.Core.Object&amp;gt; dir(otnn_client) [&amp;lsquo;bbox&amp;rsquo;, &amp;lsquo;clientName&amp;rsquo;, &amp;lsquo;componentState&amp;rsquo;, &amp;lsquo;drawOtherMarkersColor&amp;rsquo;, &amp;lsquo;drawOtherMarkersSize&amp;rsquo;, &amp;lsquo;drawTrackedMarkersColor&amp;rsquo;, &amp;lsquo;drawTrackedMarkersSize&amp;rsquo;, &amp;lsquo;listening&amp;rsquo;, &amp;lsquo;name&amp;rsquo;, &amp;lsquo;otherMarkers&amp;rsquo;, &amp;lsquo;printLog&amp;rsquo;, &amp;lsquo;scale&amp;rsquo;, &amp;lsquo;serverName&amp;rsquo;, &amp;lsquo;tags&amp;rsquo;, &amp;lsquo;trackedMarkers&amp;rsquo;] bold: not in API http://www.sofa-framework.org/api/master/plugins/OptiTrackNatNet/html/class_sofa_opti_track_nat_net_1_1_opti_track_nat_net_client.html difference between client name and server name</description></item><item><title>Cheatsheet</title><link>https://salehahr.github.io/studienarbeit/cheatsheet/</link><pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/cheatsheet/</guid><description>Parent: [SofaPython Index](SofaPython Index.md)
Imports/Plugins import SofaRuntime from SofaRuntime import PluginRepository PluginRepository.addFirstPath(SOFA_INSTALL_DIR) SofaRuntime.importPlugin(&amp;ldquo;SofaComponentAll&amp;rdquo;) SofaRuntime.importPlugin(&amp;ldquo;SofaPython3&amp;rdquo;) SofaRuntime.importPlugin(&amp;ldquo;SofaOpenglVisual&amp;rdquo;)
From root root = Sofa.Core.Node(&amp;ldquo;root&amp;rdquo;) c = root.createObject(&amp;ldquo;MechanicalObject&amp;rdquo;, name=&amp;ldquo;t&amp;rdquo;, position=[ [0, 0, 0], [1, 1, 1], [2, 2, 2]]) c1 = root.addObject(&amp;ldquo;MechanicalObject&amp;rdquo;, name=&amp;ldquo;c1&amp;rdquo;)
From nonroot nonroot_node = Sofa.Core.Node(&amp;ldquo;a_node&amp;rdquo;) nonroot_node.addObject(&amp;ldquo;MechanicalObject&amp;rdquo;, name=&amp;ldquo;c1&amp;rdquo;) .addData(&amp;ldquo;d&amp;rdquo;, value=&amp;ldquo;coucou&amp;rdquo;, type=&amp;ldquo;string&amp;rdquo;) .addData(&amp;ldquo;data1&amp;rdquo;, value=&amp;quot;@/c1.d&amp;quot;) # @ is root
Add data from relative/absolute paths c4.addData(&amp;lsquo;data1&amp;rsquo;, value=&amp;quot;@/n1/c3.data1&amp;quot;) # absolute path (chained) c4.addData(&amp;lsquo;data2&amp;rsquo;, value=&amp;quot;@../n1/c3.data1&amp;quot;) # relative path (down, chained) c1.</description></item><item><title>Someone's SP3 setup</title><link>https://salehahr.github.io/studienarbeit/someones-sp3-setup/</link><pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/someones-sp3-setup/</guid><description>Parent: SofaPython Index http://gist.github.com/pedroperrusi/9fdd4257db72465c8fb481381f396c51</description></item><item><title>Initialising graph in SP3</title><link>https://salehahr.github.io/studienarbeit/initialising-graph-in-sp3/</link><pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/initialising-graph-in-sp3/</guid><description>Parent: SofaPython Index http://github.com/SofaDefrost/plugin.SofaPython3.deprecated/pull/110
&amp;ldquo;Can you share an example of a scene and a component you have in mind ? Because currently to summary the discussion during sofa-meeting the problem with init/bdwInit/reinit is that it that this is severely ill defined and we are considering to totally remove that from Sofa and use alternatives pattern among which:
have an onSimulationStart / onSimulationStop event to detect when the simulation is on or not avoid using getContext() to fetch other components unless you store them in SingleLink.</description></item><item><title>Collision detection and response</title><link>https://salehahr.github.io/studienarbeit/collision-detection-and-response/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/collision-detection-and-response/</guid><description>Source: SOFA extended documentation Parent: Simulation algorithms in SOFA split into several phases each phase is scheduled by a CollisionPipeline component an object which can potentially collide is associated with a collision geometry returns pairs of colliding bounding volumes (broad phase component) returns pairs of geometric primitives + contact points (narrow phase component) the returned pairs are passed to the contact manager the contact manager creates contact interactions &amp;hellip; (skimmed)</description></item><item><title>Constraint solvers</title><link>https://salehahr.github.io/studienarbeit/constraint-solvers/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/constraint-solvers/</guid><description>Source: SOFA extended documentation Parent: Simulation algorithms in SOFA Backlinks: Scene graph in SOFA Lagrange multipliers to handle complex constraints (which aren&amp;rsquo;t handle-able using projection matrices ) May be combined with explicit or implicit integration phi: bilateral interaction laws (attachments, sliding joints, &amp;hellip;) psi: unilateral interaction laws (contact, friction, &amp;hellip;)
The Lagrange multipliers add force terms to the equation A*dv = b The H matrices are stored in the MechanicalState of each node.</description></item><item><title>Linear solvers</title><link>https://salehahr.github.io/studienarbeit/linear-solvers/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/linear-solvers/</guid><description>Source: SOFA extended documentation Parent: Simulation algorithms in SOFA Conjugate gradient J: first-order mapping of a node to its parent path(i): list of mappings from the independent DOFs to the node the force applies to
Computation using a visitor: Top down visitor: propagates the given displacement, clears force vector Bottom up visitor: accumulates forces, maps them up to the independent DOFs Direct solvers
can be used as preconditioners of the conjugate gradient algorithm can be used to solve the equation system A*dv=b implementations are based external libraries</description></item><item><title>Mesh topology</title><link>https://salehahr.github.io/studienarbeit/mesh-topology/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/mesh-topology/</guid><description>Source: SOFA extended documentation Parent: Data structure in SOFA See also: Mesh geometry Mesh topology: how the vertices are connected to each other (using what element?)
Hierarrchy of mesh topology: Topology objects consist of four functional members which creates/modifies/gets topology arrays/geometrical information:
Container Modifier Algorithms Geometry Topological mapping:
Define a new mesh topology from an existing one, using the same DOFs e.g. for subsetting a set of nodes, edges, or to split quads into 2 triangles each these topologies are therefore assigned to the same MechanicalState</description></item><item><title>ODE solvers</title><link>https://salehahr.github.io/studienarbeit/ode-solvers/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/ode-solvers/</guid><description>Source: SOFA extended documentation Parent: Simulation algorithms in SOFA Backlinks: Linear solvers , constraint-solvers implement animation algorithms at each time step integrate and compute positions and velocities one time step ahead uses state vectors (e.g. for position or force), denoted by symbolic identificators called VecId s this allows the solver to be implemented completely independently of the physical model Each statement in the example above is implemented using a visitor</description></item><item><title>Simulation algorithms in SOFA</title><link>https://salehahr.github.io/studienarbeit/simulation-algorithms-in-sofa/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/simulation-algorithms-in-sofa/</guid><description>Source: SOFA extended documentation ODE integration ( ODE solvers ) Linear equation solution ( linear solvers ) Complex constraints ( constraint solvers ) Collision detection and response GPU support</description></item><item><title>SofaPython Index</title><link>https://salehahr.github.io/studienarbeit/sofapython-index/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/sofapython-index/</guid><description>Building/setup Building SOFA on Windows Someone&amp;rsquo;s SP3 setup Running Running SOFA with Python Using python with existing scene Basic python script in Sofa Initialising graph in SP3 Plugins Possible plugins Install ROSConnector in SOFA STLIB (Sofa Template Library) Registration Communication Sending data using sockets Sockets Errno 10054 External data in SOFA Documentation SofaPython API/Documentation links Cheatsheet</description></item><item><title>SofaPython Index</title><link>https://salehahr.github.io/studienarbeit/sofapython-index/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/sofapython-index/</guid><description>Building/setup Building SOFA on Windows Someone&amp;rsquo;s SP3 setup Running Running SOFA with Python Using python with existing scene Basic python script in Sofa Initialising graph in SP3 Plugins Possible plugins Install ROSConnector in SOFA STLIB (Sofa Template Library) Registration Communication Sending data using sockets Sockets Errno 10054 External data in SOFA Documentation SofaPython API/Documentation links Cheatsheet</description></item><item><title>VecId</title><link>https://salehahr.github.io/studienarbeit/vecid/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/vecid/</guid><description>Source: [SOFA extended documentation](SOFA extended documentation.md) Parent: [ODE solvers](ODE solvers.md)
Uniquely identifies state vectors (which are scattered over all MechanicalStates ) Mechanical operations (e.g. allocating a state vector, accumulating forces) are implemented using a specialised visitor parametrised on VecIds</description></item><item><title>Barycentric coordinates</title><link>https://salehahr.github.io/studienarbeit/barycentric-coordinates/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/barycentric-coordinates/</guid><description>Source: SOFA extended documentation Baclinks: [Top-down mapping (master to slave)](top-down mapping (master to slave).md), lamarca-2019-defslam Barycentre: centre of mass A coordinate system, in which the location of point of a simplex (line, triangle, tetrahedron, etc) is specified as the centre of mass of the masses placed at its vertices x_i vertices of a simplex p a point in space The a_i coefficients are the barycentric coordinates of p w.</description></item><item><title>Bottom-up mapping (slave to master)</title><link>https://salehahr.github.io/studienarbeit/bottom-up-mapping-slave-to-master/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/bottom-up-mapping-slave-to-master/</guid><description>Source: SOFA extended documentation Parent: Mappings Mapping of a slave forces to the master forces Newton&amp;rsquo;s law f=Ma applies
Equivalence of power using the kinematic relation using the principle of virtual work</description></item><item><title>Components of the internal model</title><link>https://salehahr.github.io/studienarbeit/components-of-the-internal-model/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/components-of-the-internal-model/</guid><description>Source: SOFA extended documentation Parent: [Internal model as a scene graph in SOFA](internal model as-a-scene-graph-in-sofa.md)
MeshLoader: topology, geometry
MechanicalState TetrahedronSetTopologyContainer
tetrahedral connectivity passed on to other components Forces Mass
DiagonalMass UniformMass: less accurate, but allows faster computation FixedConstraint: P (cancels displacements)
EulerSolver: integration scheme</description></item><item><title>Force classes in SOFA</title><link>https://salehahr.github.io/studienarbeit/force-classes-in-sofa/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/force-classes-in-sofa/</guid><description>Source: SOFA extended documentation Parent: Components of the internal model More than 30 classes available in SOFA
FEM
for deformable volumes/surfaces
volume: tetrahedron/hexahedron surface: shell/membrane TetrahedralCorotationalFEMForceField: forces based on FEM
corotational/hyperelastic formulations
wire/tubular objects
Springs
SpringForceField: forces generated by the surface (alternative: TriangleFEMFroceField) ConstantForceField: external forces</description></item><item><title>Internal model as a scene graph in SOFA</title><link>https://salehahr.github.io/studienarbeit/internal-model-as-a-scene-graph-in-sofa/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/internal-model-as-a-scene-graph-in-sofa/</guid><description>Source: SOFA extended documentation Parent: Internal model Scene graph of the internal model
Consists of components which are connected to a common scenegraph node (root of the internal model)
Each component is responsible for a set of tasks Examples: solver, mass, constraints, &amp;hellip;
Each component can query its parent node to get access to the its sibling components such as MechanicalState , topology
Components are independent of one another — modularity</description></item><item><title>Mathematical model of the internal model in SOFA</title><link>https://salehahr.github.io/studienarbeit/mathematical-model-of-the-internal-model-in-sofa/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/mathematical-model-of-the-internal-model-in-sofa/</guid><description>Source: SOFA extended documentation Parent: Internal model Backlinks: ODE solvers , constraint-solvers Dynamic/quasi-static system of particles (nodes) Independent DOFs: node coordinates, governed by  f: different force functions, e.g. volume, surface and external forces) M: mass matrix P: constraints (projection matrix) each operator corresponds to a simulation component</description></item><item><title>MechanicalState</title><link>https://salehahr.github.io/studienarbeit/mechanicalstate/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/mechanicalstate/</guid><description>Source: [SOFA extended documentation](SOFA extended documentation.md) Parents: [Components of the internal model](Components of the internal model.md), [Internal model as a scene graph in SOFA](Internal model as a scene graph in SOFA.md) Backlinks: VecId , [Scene graph in SOFA](Scene graph in SOFA.md), [Mesh topology](Mesh topology.md)
Contains state vectors of each mesh node Coordinates x Velocities v Net force f n nodes: n entries of the state vector Each entry has the same size of the node type (3 for 3D particles) Nodes of different types belong to different MechanicalStates the other MechanicalStates are attached to other scene graph nodes they might be connected with one another using interaction forces</description></item><item><title>Scene graph (general)</title><link>https://salehahr.github.io/studienarbeit/scene-graph-general/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/scene-graph-general/</guid><description>Source: http://en.wikipedia.org/wiki/Scene_graph See also: Scene graph in SOFA A general data structure Collection of nodes in a graph/tree</description></item><item><title>Top-down mapping (master to slave)</title><link>https://salehahr.github.io/studienarbeit/top-down-mapping-master-to-slave/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/top-down-mapping-master-to-slave/</guid><description>Source: SOFA extended documentation Parent: Mappings Mapping of a master states to the slave states with the Jacobian (kinematic relation) Linear/nonlinear mappings
In linear mappings, J and J are the same In nonlinear mappings, J is nonlinear w.r.t. x_m, i.e. not a matrix Surfaces
Surfaces embedded in deformable cells: J contains barycentric coordinates Surfaces attached to rigid bodies: each row of J encodes for each vertex</description></item><item><title>Visual model</title><link>https://salehahr.github.io/studienarbeit/visual-model/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/visual-model/</guid><description>Source: SOFA extended documentation Parent: Models in SOFA More detailed geometry than that of the internal model , hence uses different meshes Mappings are used to update the visual model with the deformations taking place Contains rendering parameters Libraries for rendering graphics
OGRE (external) Open Scene Graph (external) SOFA&amp;rsquo;s own library based on openGL</description></item><item><title>External data in SOFA</title><link>https://salehahr.github.io/studienarbeit/external-data-in-sofa/</link><pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/external-data-in-sofa/</guid><description>Parent: SofaPython Index http://www.sofa-framework.org/community/forum/topic/how-to-use-external-data-in-sofa/ http://www.sofa-framework.org/community/forum/topic/how-to-send-data-to-sofa-through-socket/ http://www.sofa-framework.org/community/forum/topic/connecting-sofa-to-an-external-data-com-port/</description></item><item><title>Registration</title><link>https://salehahr.github.io/studienarbeit/registration/</link><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/registration/</guid><description>Parent: [SofaPython Index](SofaPython Index.md)
allows a matching between deformable surfaces
finds spatial transformations to align two point sets or two meshes
done based on:
either target surfaces (ClosestPointRegistrationForceField , RegistrationContactForceField)
or target images (IntensityProfileRegistrationForceField), which requires the use of the image plugin</description></item><item><title>Building SOFA on Windows</title><link>https://salehahr.github.io/studienarbeit/building-sofa-on-windows/</link><pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/building-sofa-on-windows/</guid><description>Parent: SofaPython Index http://www.sofa-framework.org/community/doc/getting-started/build/windows/</description></item><item><title>Install ROSConnector in SOFA</title><link>https://salehahr.github.io/studienarbeit/install-rosconnector-in-sofa/</link><pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/install-rosconnector-in-sofa/</guid><description>Parent: SofaPython Index http://github.com/sofa-framework/SofaROSConnector Documentation (outdated for current SOFA version 20.06.00)
http://www.sofa-framework.org/community/forum/topic/error-configuring-cmake-sofarosconnector/ Pending answer. Last reply 10th July 2020.
Alternative using SoftRobots: &amp;lt;http://www.sofa-framework.org/community/forum/topic/error-with-plugins-with-sofarosconnector/
post-15665&amp;gt; http://project.inria.fr/softrobot/</description></item><item><title>SofaPython API/Documentation links</title><link>https://salehahr.github.io/studienarbeit/sofapython-api-documentation-links/</link><pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/sofapython-api-documentation-links/</guid><description>Parent: SofaPython Index SP2
SofaPython pdf http://www.sofa-framework.org/api/master/plugins/SofaPython/html/index.html http://sofacomponents.readthedocs.io/en/latest/index.html SP3
http://sofapython3.readthedocs.io/en/latest/menu/SofaPlugin.html</description></item><item><title>STLIB (Sofa Template Library)</title><link>https://salehahr.github.io/studienarbeit/stlib-sofa-template-library/</link><pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/stlib-sofa-template-library/</guid><description>Parent: SofaPython Index http://github.com/SofaDefrost/STLIB
API doc: http://stlib.readthedocs.io/en/latest/index.html
contains sofa scene template common scene template used regularly templates should be compatible with .pyscn and PSL scenes</description></item><item><title>Possible plugins</title><link>https://salehahr.github.io/studienarbeit/possible-plugins/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/possible-plugins/</guid><description>Parent: Scope of Studienarbeit , sofapython-index Communication
ZMQCommunication someone&amp;rsquo;s own plugin Optical system
OptiTrackNatNet Mesh geometry/topology
CGALPlugin (computational geometry algorithms) Haptic
Haptics with Geomagic &amp;ndash; requires Geomagic probe, but code/intro may be useful SofaHaptics Haption Flexible - for deformations Sensable Robot arm
SoftRobots ROS Connector  too complicated Scenes
STLIB (Sofa Template Library) Registration</description></item><item><title>Possible plugins</title><link>https://salehahr.github.io/studienarbeit/possible-plugins/</link><pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/possible-plugins/</guid><description>Parent: Scope of Studienarbeit , sofapython-index Communication
ZMQCommunication someone&amp;rsquo;s own plugin Optical system
OptiTrackNatNet Mesh geometry/topology
CGALPlugin (computational geometry algorithms) Haptic
Haptics with Geomagic &amp;ndash; requires Geomagic probe, but code/intro may be useful SofaHaptics Haption Flexible - for deformations Sensable Robot arm
SoftRobots ROS Connector  too complicated Scenes
STLIB (Sofa Template Library) Registration</description></item><item><title>Basic python script in Sofa</title><link>https://salehahr.github.io/studienarbeit/basic-python-script-in-sofa/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/basic-python-script-in-sofa/</guid><description>Parent: SofaPython Index Imports import Sofa
General functions
createGraph(self, root) reset() onKeyPressed() &amp;hellip; Required in every script: createScene(rootNode)
Create a child from a node node.createChild(&amp;lsquo;Name&amp;rsquo;)
Add an object component to the node: node.createObject(type in string, kwargs**)</description></item><item><title>Collision model</title><link>https://salehahr.github.io/studienarbeit/collision-model/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/collision-model/</guid><description>Source: SOFA extended documentation Parent: Models in SOFA Primitives coming into contact — we need
collision detection collision response Collision detection approaches:
Distances between pairs of geometric primitives Points in distance fields Distances between colliding meshes using ray-tracing Intersection volume using images Collision model
Similar to internal model
Topology/geometry is different (geometry specially for contact model), can be stored in a data structure dedicated to collision detection e.</description></item><item><title>Data structure in SOFA</title><link>https://salehahr.github.io/studienarbeit/data-structure-in-sofa/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/data-structure-in-sofa/</guid><description>Source: SOFA extended documentation Three different solutions for three relevant levels [of organisation of simulation data].
Scenegraph ( directed acyclic graphs) s. also: Visitors Component attributes
Component params stored using Data&amp;lt;&amp;hellip;&amp;gt; containers e.g. list of particle indices Data&amp;lt;vector&amp;gt; Engines Create connections between Data instances, for synchronisation of values Compute a value from several others (input/output processor) Are only used to apply straightforward relations between model parameters State update algorithms are implemented using visitors Mesh geometry and mesh-topology</description></item><item><title>Haptic rendering</title><link>https://salehahr.github.io/studienarbeit/haptic-rendering/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/haptic-rendering/</guid><description>Source: SOFA extended documentation The main interest of interactive simulation is that
the user can modify the course of the computations in real-time when a virtual medical instrument comes into contact with some models of a soft-tissue, instantaneous deformations must be computed This visual feedback of the contact can be enhanced by haptic rendering so that the surgeon can really feel the contact.&amp;quot; Two main issues in SOFA for providing haptics</description></item><item><title>Internal model</title><link>https://salehahr.github.io/studienarbeit/internal-model/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/internal-model/</guid><description>Source: SOFA extended documentation Parent: Models in SOFA For the internal deformable mechanics
Contains the independent DOFs, mass and physical laws Mechanical behaviour modelled e.g. by FEM Geometry of this model is optimised for the computation of internal forces usually by using a reduced number of well-shaped tetrahedra this increases speed and stability however not accurate enough for collision detection nor is it smooth enough for visuals * Boxes: fixed nodes* Arrows: external forces [Mathematical model of the internal model in SOFA](mathematical model of-the-internal-model-in-sofa.</description></item><item><title>Mappings</title><link>https://salehahr.github.io/studienarbeit/mappings/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/mappings/</guid><description>Source: [SOFA extended documentation](SOFA extended documentation.md) Backlinks: Models in SOFA , Visual model Enforces consistency between the many model representations of an object, by propagating information (such as positions, velocities, forces) in a top-down and bottom-up approach. Figure: Mappings between liver and grasper models
Master model imposes its displacements to the slave models ([top-down mapping](top-down mapping.md)) Slaves, depending on model type, can also pass information (e.g. forces) back to the master (bottom-up) A mapped model can be master of another model Also used to connect generalised coordinates (e.</description></item><item><title>Mesh geometry</title><link>https://salehahr.github.io/studienarbeit/mesh-geometry/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/mesh-geometry/</guid><description>Source: SOFA extended documentation Parent: Data structure in SOFA See also: Mesh topology Mesh geometry: location of vertices in space
Meshes
k-simplices (triangles) k-cubes (quads) --&amp;gt; decomposition into k-cells
1-cell: edges 2-cells: triangles, quads 3-cells: tetrahedron, hexahedron Mesh data:
containers, similar to STL std::vector classes there are as many data structures for mesh data as topological elements , e.g. vertices, edges, triangles, quads, tetras, hexas e.</description></item><item><title>Models in SOFA</title><link>https://salehahr.github.io/studienarbeit/models-in-sofa/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/models-in-sofa/</guid><description>Source: SOFA extended documentation Backlinks: SOFA Introduction A simulation object can have several models
Each model is &amp;lsquo;predestined&amp;rsquo; for a certain task Each model is independent of the other Synchronisation of models: via a mapping mechanism Three typical models for a physical object
Internal mechanical model Collision model Visual model One of the models acts as the master
typically the internal model imposes its displacements to slaves using mappings (synchronisation of the models)</description></item><item><title>Running SOFA with Python</title><link>https://salehahr.github.io/studienarbeit/running-sofa-with-python/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/running-sofa-with-python/</guid><description>Parent: SofaPython Index From command line Add to path environment and then execute runSofa via command line
With a python script runSofa -l SofaPython ./script_name.py
How to make SofaPython loaded by default? In bin/plugin_list.conf? Yes sofa-launcher might be useful With pipenv pipenv run runsofa</description></item><item><title>Scene graph in SOFA</title><link>https://salehahr.github.io/studienarbeit/scene-graph-in-sofa/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/scene-graph-in-sofa/</guid><description>Source: SOFA extended documentation Parent: Data structure in SOFA Backlinks: SOFA Introduction See also: Scene graph (general) Pool of simulated objects and algorithms in a hierarchical data structure Scenes can be built procedurally or read from XML files Root node represents whole simulation Graph is processed by using visitors A scene graph node
Gathers components associated with the same DOFs/topology Connections between non-sibling components require explicit references Example: The collision spheres of the rigid object are in a child contact node of their own, because they are not independent DOFs (separate from independent DOFs in MechanicalState ) they are of a different data type Interactions between the rigid and deformable objects are handled by a shared component (ContactSpring) defined as a sibling node to both (coupling) Soft coupling using penalty forces Can be modelled by a constant interaction force (assumption) during each time step Compatible with all explicit time intergration schemes Hard coupling using penalty forces / constraint-based interaction via Lagrange multipliers Stiff interaction forces Implicit integration necessary, for large time steps without any instabilities Generally more efficient to process independent interaction groups using separate solvers</description></item><item><title>SOFA extended documentation</title><link>https://salehahr.github.io/studienarbeit/sofa-extended-documentation/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/sofa-extended-documentation/</guid><description>Source: http://hal.inria.fr/hal-00681539 Authors: Faure et al Backlinks: Scope of Studienarbeit Abstract
SOFA: open source C++ library mainly for interactive physical/medical simulation modular approach by decomposing simulators into its constituent components (DOF, differential equations, solvers etc), and organising them in a scenegraph data structure multimodel representation of objects (collision model, visual model etc) Chapters
Read
1: introduction 2: multimodel framework 3: data structures 3.1 scenegraph and visitors 3.</description></item><item><title>SOFA Introduction</title><link>https://salehahr.github.io/studienarbeit/sofa-introduction/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/sofa-introduction/</guid><description>Source: SOFA extended documentation Goal of SOFA: To provide a highly modular framework for interactive medical simulation, enabling collaboration across different disciplines Concept: scene-graph -based multimodel representatios
How it works:
Simulators are broken down into independent components Component: an aspect of the simulation e.g. DOF, forces, constraints, ODEs/PDEs, solvers, algorithms Components are organised in a scene graph data structure Simulated objects represented via several models</description></item><item><title>Using python with existing scene</title><link>https://salehahr.github.io/studienarbeit/using-python-with-existing-scene/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/using-python-with-existing-scene/</guid><description>Parent: SofaPython Index In scene graph
Add plugin in the scene using RequiredPlugin Define a PythonScriptController in the scene graph</description></item><item><title>Visitors</title><link>https://salehahr.github.io/studienarbeit/visitors/</link><pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate><guid>https://salehahr.github.io/studienarbeit/visitors/</guid><description>Source: [SOFA extended documentation](SOFA extended documentation.md) Parent: [Data structure in SOFA](Data structure in SOFA.md) Backlinks: [Scene graph in SOFA](Scene graph in SOFA.md), [Simulation algorithms in SOFA](Simulation algorithms in SOFA.md)
For processing of data structure: parent to child
Allows decoupling of physical model from simulation algo e.g. Easy to replace a time integrator, which wouldn&amp;rsquo;t be the case in a dataflow graph (coupling of data and algo)</description></item></channel></rss>